plugins {
    id "idea"
    id "org.jetbrains.kotlin.plugin.spring"
    id "org.jetbrains.kotlin.plugin.noarg"
    id "org.jetbrains.kotlin.plugin.jpa"

    id "nu.studer.jooq" version "8.2"
}

dependencies {

    api("org.springframework.boot:spring-boot-starter-jooq")
    api("org.springframework.data:spring-data-jdbc")
    testImplementation("org.springframework.boot:spring-boot-starter-test")

    api(Libraries.jooq)
    // JOOQ schema generation
    jooqRuntime(Libraries.jooq_meta_extensions)
    jooqRuntime(Libraries.h2)
    testImplementation(Libraries.h2)
}

// see : https://www.jooq.org/doc/3.11/manual/code-generation/codegen-ddl/
jooq {
//    version = Versions.jooq
//    edition = JooqEdition.OSS

    // category 는 Configuration Name에 해당한다.
    // 아래 `generate[Category]JooqSchemaSource`에 사용되므로 같이 변경해야 한다
//    category(sourceSets.main) {
//        jdbc {
//            driver = "org.h2.Driver"
//            url = "jdbc:h2:~/jooq-category;MVCC=true;AUTO_SERVER=TRUE"
//            user = "sa"
//            password = ''
//        }
//        generator {
//            name = 'org.jooq.codegen.DefaultGenerator'
//            strategy {
//                name = 'org.jooq.codegen.DefaultGeneratorStrategy'
//            }
//            database {
//                // 테스트 용은 DB Script를 사용하므로, DDLDatabase를 사용한다
//                name = 'org.jooq.meta.extensions.ddl.DDLDatabase'
//                properties {
//                    property {
//                        key = "scripts"
//                        value = "./src/main/resources/schema.sql"
//                    }
//                }
//            }
//            generate {
//                relations = true
//                deprecated = false
//                records = true
//                immutablePojos = true  // generate entity class
//                fluentSetters = true
//            }
//            target {
//                packageName = "io.github.debop.jooq"
//            }
//        }
//    }
}

idea {
    module {
        sourceDirs += file("build/generated-src/jooq/sample")
        generatedSourceDirs += file("build/generated-src/jooq/sample")
    }
}

// jOOQ Code Generation을 Kotlin Compile 보다 먼저 하도록 한다.
compileKotlin.dependsOn generateCategoryJooqSchemaSource
compileTestKotlin.dependsOn generateCategoryJooqSchemaSource
