package io.github.debop.springdata.jpa.mapping.associations.onetoone

import org.springframework.data.jpa.repository.JpaRepository
import org.springframework.stereotype.Repository
import javax.persistence.CascadeType.ALL
import javax.persistence.Entity
import javax.persistence.FetchType.LAZY
import javax.persistence.GeneratedValue
import javax.persistence.GenerationType.IDENTITY
import javax.persistence.Id
import javax.persistence.MapsId
import javax.persistence.OneToOne
import javax.persistence.PrimaryKeyJoinColumn


@Repository
interface AuthorRepository : JpaRepository<Author, Long>

// 가장 기본적인 Bidirectional One-To-One Mapping 입니다.
// Master에 종속적인 Detail은 자체적인 Id 없이 Master의 Id 에 종속됩니다.

// 참고: http://kwonnam.pe.kr/wiki/java/jpa/one-to-one

/*
    create table onetoone_author (
       id bigint generated by default as identity,
        name varchar(255),
        primary key (id)
    )
 */
@Entity(name = "onetoone_author")
data class Author(
    @Id
    @GeneratedValue(strategy = IDENTITY)
    var id: Long? = null,
    var name: String
) {

    // 얘네는 nullable 이 아니므로, lazy loading 이 됩니다.
    @OneToOne(mappedBy = "author", cascade = [ALL], fetch = LAZY)
    val picture: AuthorPicture = AuthorPicture(author = this)

    @OneToOne(mappedBy = "author", cascade = [ALL], fetch = LAZY)
    val biography: Biography = Biography(author = this)
}

/*
    create table onetoone_picture (
       path varchar(255),
        author_id bigint not null,
        primary key (author_id)
    )
 */
@Entity(name = "onetoone_picture")
data class AuthorPicture(
    // 이렇게 Id 를 설정하지만, 실제 TABLE에는 id column 은 없다. primary key @MapsId에 해당하는 author_id 가 된다.
    @Id
    var id: Long? = null,
    @MapsId
    @OneToOne(cascade = [ALL], fetch = LAZY)
    @PrimaryKeyJoinColumn(name = "author_id")
    val author: Author? = null
) {
    var path: String? = null
}

/*
    create table onetoone_biography (
       information varchar(255),
        author_id bigint not null,
        primary key (author_id)
    )
 */
@Entity(name = "onetoone_biography")
data class Biography(
    @Id
    var id: Long? = null,
    @MapsId
    @OneToOne(cascade = [ALL], fetch = LAZY)
    @PrimaryKeyJoinColumn(name = "author_id")
    val author: Author? = null
) {
    var information: String? = null
}